/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/sbom": {
    /**
     * Upload SBOM
     * @description Upload SBOM for analyzation and notarization.
     */
    post: operations["uploadSbom"];
  };
  "/sbom/temporary-report": {
    /**
     * Analyze SBOM to receive a report
     * @description Only analyze SBOM without uploading
     */
    post: operations["temporaryReport"];
  };
  "/sbom/reports/{id}": {
    /**
     * Get report of SBOM
     * @description Get the report of a previously analyzed SBOM
     */
    get: operations["getSbomReport"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ErrorReply: {
      /** @description Status code */
      code: number;
      /** @description Message of error (for debug) */
      message?: string;
    };
    TemporaryReportReply: {
      /** Format: uuid */
      sbomID: string;
    };
    SbomReply: {
      /** Format: uuid */
      sbomID: string;
    };
    ReportReply: {
      /**
       * Format: uuid
       * @description ID of SBOM.
       */
      id: string;
      /**
       * @description Status of report operation. Report is generated for following states: TemporaryReportGenerated,FinalReportGenerated
       * @example PendingScanResult
       * @enum {string}
       */
      status: "ErrorDuringScan" | "PendingScanResult" | "TemporaryReportGenerated" | "FinalReportGenerated";
      report?: components["schemas"]["SbomReport"];
    };
    SbomCycloneDX: unknown;
    SbomReport: {
      /**
       * @description Score of trust level. The higher the better.
       * @example 8
       */
      trustLevelScore: number;
      vulnerabilities?: components["schemas"]["SbomVulnerability"][];
    };
    SbomVulnerability: {
      /**
       * @description CVE name.
       * @example CVE-2999-5484
       */
      id: string;
      /**
       * @description Highest severity for given CVE.
       * @example critical
       * @enum {string}
       */
      highestSeverity: "critical" | "high" | "medium" | "low" | "info" | "none" | "unknown";
      issues?: components["schemas"]["SbomVulnerabilityIssue"][];
    };
    SbomVulnerabilityIssue: {
      /**
       * @description ID of issue. First character indicates severity: I for information, E for error, W for warning.
       * @example E001
       */
      id: string;
      /** @description Description of issue. */
      description: string;
    };
    ProjectPath: string;
    Label: string;
  };
  responses: never;
  parameters: {
    /** @description Path of the project. */
    ProjectPathMandatory: components["schemas"]["ProjectPath"];
    /** @description Labels of sbom */
    Labels?: components["schemas"]["Label"][];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Upload SBOM
   * @description Upload SBOM for analyzation and notarization.
   */
  uploadSbom: {
    parameters: {
      query: {
        projectPath: components["parameters"]["ProjectPathMandatory"];
      };
    };
    /** @description SBOM to submit */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SbomCycloneDX"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["SbomReply"];
        };
      };
      /** @description Errors */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorReply"];
        };
      };
    };
  };
  /**
   * Analyze SBOM to receive a report
   * @description Only analyze SBOM without uploading
   */
  temporaryReport: {
    /** @description CycloneDX SBOM to submit */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SbomCycloneDX"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["TemporaryReportReply"];
        };
      };
      /** @description Errors */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorReply"];
        };
      };
    };
  };
  /**
   * Get report of SBOM
   * @description Get the report of a previously analyzed SBOM
   */
  getSbomReport: {
    parameters: {
      path: {
        /** @description ID returned by /sbom or /sbom/temporary-report endpoint */
        id: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReportReply"];
        };
      };
      /** @description Errors */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorReply"];
        };
      };
    };
  };
}
